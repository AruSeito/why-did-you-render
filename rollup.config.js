import {flatMap, compact} from 'lodash'
import resolve from 'rollup-plugin-node-resolve'
import commonjs from '@rollup/plugin-commonjs'
import babel from '@rollup/plugin-babel'
import {terser} from 'rollup-plugin-terser'
import license from 'rollup-plugin-license'

import pkg from './package.json'

const banner = `
<%= pkg.name %> <%= pkg.version %>
MIT Licensed 
Generated by <%= pkg.authors[0] %>
Generated at <%= moment().format('YYYY-MM-DD') %>
`

export default flatMap(['none', 'shouldMinify', 'noClassesTranspile', 'both'], buildMode => {
  const shouldMinify = buildMode === 'shouldMinify' || buildMode === 'both'
  const shouldTranspileClasses = buildMode === 'none' || buildMode === 'both'

  const babelPlugins = compact([
    shouldTranspileClasses && '@babel/plugin-transform-classes'
  ])

  return [
    {
      input: 'src/index.js',
      external: importName => [/lodash/].some(libRegexp => libRegexp.test(importName)),
      output: [
        {
          name: 'whyDidYouRender',
          file: (shouldTranspileClasses ? pkg.browser : pkg['browser-no-classes-transpile'])
            .replace('.min', shouldMinify ? '.min' : ''),
          format: 'umd',
          sourcemap: shouldMinify,
          sourcemapFile: pkg.browser.replace('.js', '.js.map'),
          exports: 'default',
          globals: importName => {
            if(importName === 'lodash'){
              return 'lodash'
            }
            if(/lodash/.test(importName)){
              return `lodash.${importName.slice('lodash'.length + 1)}`
            }
          }
        },
        {
          file: (shouldTranspileClasses ? pkg.main : pkg['main-no-classes-transpile'])
            .replace('.min', shouldMinify ? '.min' : ''),
          format: 'cjs',
          sourcemap: shouldMinify,
          sourcemapFile: pkg.main.replace('.js', '.js.map'),
          exports: 'default'
        },
        {
          file: (shouldTranspileClasses ? pkg.module : pkg['module-no-classes-transpile'])
            .replace('.min', shouldMinify ? '.min' : ''),
          format: 'esm',
          sourcemap: shouldMinify,
          sourcemapFile: pkg.module.replace('.js', '.js.map')
        }
      ],
      plugins: [
        babel({
          exclude: 'node_modules/**',
          plugins: babelPlugins,
          babelHelpers: 'bundled'
        }),
        resolve(),
        commonjs(),
        shouldMinify && terser(),
        license({
          sourcemap: true,
          banner
        })
      ]
    }
  ]
})
